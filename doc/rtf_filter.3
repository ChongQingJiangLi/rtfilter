.\"Copyright 2010 (c) EPFL
.TH RTF_FILTER 3 2010 "EPFL" "rtfilter library"
.SH NAME
rtf_filter - filters a chunk of data
.SH SYNOPSIS
.LP
.B #include <rtfilter.h>
.sp
.BI "unsigned int rtf_filter(hfilter " filt ", const void *" x ","
.br
.BI "                        void *" y ", unsigned int " ns ");"
.br
.SH DESCRIPTION
.LP
This function applies the filter referenced by \fIfilt\fP on \fIns\fP
samples specified by the pointer \fIx\fP and writes the filtered data into
the array pointed by \fIy\fP. The arrays pointed by \c x and \c y must be
made of values whose correspond to the type specified at the creation of
the filter. In addition, the two arrays \fBmust not overlap\fP (failing to
comply will lead to undefined results).
.LP
Their number of elements have to be equal to \fIns\fP multiplied by the
number of channels processed (specified at the creation of the filter). The
arrays should be packed by channels with the following pattern:
.ce
|S1C1|S1C2|...|S1Ck|S2C1|S2C2|....|S2Ck|...|SnsCk|
.br
where SiCj refers to the data value of the i-th sample and the j-th channel
and k refers to the number of channel specified at the creation of the
filter.
.SH "RETURN VALUE"
.LP
Returns the number of samples written in the array pointer by \fIy\fP. For 
most of the filters, this value will always be equal to \fIns\fP. This is
however not the case of a downsampling filter whose the number of samples
returned may vary from one call to another.
.SH "PERFORMANCE CONSIDERATION"
.LP
On platforms that support SIMD instructions, \fBrtf_filter\fP() is
implemented in 2 different versions: one normal and one using SIMD
instruction set which performs nearly 4x faster than the normal one when
processing \fBfloat\fP data types. The SIMD version is automatically
selected at runtime if the following conditions are met (otherwise, the
implementation falls back to the normal version):
.IP " -" 3
The input \fIx\fP and output \fIy\fP are aligned on 16 bytes boundary
(128 bits)
.IP " -" 3
The sample strides (the size of the data type multiplied by the number of
channel) of the input and output are multiples of 16 bytes.
.LP
The first condition is easily met by allocating \fIx\fP and \fIy\fP using
memory allocation function mandating a certain alignment (for example,
\fBposix_memalign\fP(3) on POSIX platform).
.LP
The second condition is met if the number of channels is carefully chosen.
Given the boost obtained with the SIMD version, it is often interesting to
add unused channels into the input and output (when possible) just to make
the strides multiple of 16 bytes (for example using always a multiple of 4
channels when dealing with \fBfloat\fP and real values).
.SH "SEE ALSO"
.BR rtf_create_filter (3),
.BR rtf_init_filter (3)

